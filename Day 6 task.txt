1.Class Movie
a) Write a constructor for the class Movie, which takes a String representing the 
title of the movie, a String representing the studio, and a String representing the rating as its 
arguments, and sets the respective class properties to these values.
//Input:
class movie { 

    constructor(title, studio, rating) { 

      this.title = title; 

      this.studio =  studio; 

      this.rating = rating; 

    } 
}

const movieDetails = new movie("Jailer","Sun Pictures", "PG-13");
console.log(movieDetails);

//Output:
movie { title: 'Jailer', studio: 'Sun Pictures', rating: 'PG-13' }


b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided:

//Input:
class movies { 
    constructor(title, studio, rating = "PG") { 

      this.title = title; 

      this.studio =  studio; 

      this.rating = rating; 

    } 
}

const movie1 = new movies("Jailer","Sun Pictures");
console.log(movie1);

//Output:
movies { title: 'Jailer', studio: 'Sun Pictures', rating: 'PG' }


c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a 
new array of only those movies in the input array with a rating of "PG". You may assume the input 
array is full of Movie instances. The returned array need not be full.

//Input:
 class Moviee {
    constructor(title, studio, rating) {
        this.title = title;
        this.studio = studio;
        this.rating = rating;
    }

    static getPG(input) {
        let out = input.filter(movie => movie.rating === "PG");
        return out;
    }
}

let moviee1 = new Moviee("Soorarai Pottru", "2D Entertainment", "PG");
let moviee2 = new Moviee("Anjaan", "Thirrupathi Brothers", "PG");
let movie3 = new Moviee("Ayan",  "AVM Productions", "PG");

let movieArray = [moviee1, moviee2, movie3];
let pgMovies = Moviee.getPG(movieArray);
console.log(pgMovies); 

// Output: 
[
  Moviee {
    title: 'Soorarai Pottru',
    studio: '2D Entertainment',
    rating: 'PG'
  },
  Moviee {
    title: 'Anjaan',
    studio: 'Thirrupathi Brothers',
    rating: 'PG'
  },
  Moviee { title: 'Ayan', studio: 'AVM Productions', rating: 'PG' }
]


d) Write a piece of code that creates an instance of the class Movie with the title 
“Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”
//Input:
class Moviez {
    constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
    }
    }
    
    let casinoRoyale = new Moviez("Casino Royale", "Eon Productions", "PG-13");

    console.log(casinoRoyale);

//Output:
   Moviez {
  title: 'Casino Royale',
  studio: 'Eon Productions',
  rating: 'PG-13'
}

2.Circle:
//Input:
    class Circle {
        constructor(radius = 1.0, color = "red") {
          this._radius = radius;
          this._color = color;
        }

        get radius() {
          return this._radius;
        }

        set radius(radius) {
          this._radius = radius;
        }

        get color() {
          return this._color;
        }

        set color(color) {
          this._color = color;
        }

        toString() {
          return `Circle [radius = ${this._radius} , color = ${this._color}]`;
        }

        getArea() {
          return Math.PI * Math.pow(this._radius, 2);
        }

        getCircumference() {
          return 2 * Math.PI * this._radius;
        }
      }

      const circle1 = new Circle(2, "green");
      const circle2 = new Circle(5, "Yellow");

      console.log(circle1.toString());
      console.log("Area:", circle1.getArea());
      console.log("Circumference:", circle1.getCircumference());

      console.log(circle2.toString());
      console.log("Area:", circle2.getArea());
      console.log("Circumference:", circle2.getCircumference());

//Output:
Circle [radius = 2 , color = green]
Area: 12.566370614359172
Circumference: 12.566370614359172
Circle [radius = 5 , color = Yellow]
Area: 78.53981633974483
Circumference: 31.41592653589793


3.Write a “person” class to hold all the details:

//Input:
       class Person {
        constructor(firstName, lastName, age, department, email, mobile, city){
            this.firstName = firstName;
            this.lastName = lastName;
            this.age = age;
            this.department=department;
            this.email=email;
            this.mobile=mobile;
            this.city = city;
        }
        getPersonDetails(){
            return `Name: ${this.firstName} ${this.lastName}
      age: ${this.age}
      department: ${this.department}
      email: ${this.email}
      mobile: ${this.mobile}
      city: ${this.city}`;
        }
    }
    let person1 = new Person("Iswariya","I", 22, "Art", "iswariyaishu27@gmail.com", 9843848969, "Villupuram.");

    console.log(person1.getPersonDetails());

 //Output:
Name: Iswariya I
      age: 22
      department: Art
      email: iswariyaishu27@gmail.com
      mobile: 9843848969
      city: Villupuram.
 
4.write a class to calculate the uber price:

//Input:
lass UberPrice {
    constructor(distance, duration, baseFare, costPerMile, costPerMinute) {
      this.distance = distance;
      this.duration = duration;
      this.baseFare = baseFare;
      this.costPerMile = costPerMile;
      this.costPerMinute = costPerMinute;
    }

    totalPrice() {
      return this.baseFare + (this.distance * this.costPerMile) + (this.duration * this.costPerMinute);
    }
  }

  const myUber = new UberPrice(10, 20, 30, 15, 5);
  console.log(myUber.totalPrice());

 //Output:
280